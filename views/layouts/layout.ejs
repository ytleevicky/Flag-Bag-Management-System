<!DOCTYPE html>
<html>
  <head>
    <!-- <nav class="navbar navbar-light bg-light">
    <span class="navbar-brand mb-0 h1">Navbar</span>
  </nav> -->
    <title>Flag selling system</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, maximum-scale=1"
    />

    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
      integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T"
      crossorigin="anonymous"
    />

    <%/* If you want to discourage search engines from indexing this site,
    uncomment the following line: */%> <%/*
    <meta name="robots" content="noindex" />
    */%>

    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
  </head>

  <body>
    <div class="container">
      <nav class="navbar navbar-expand-sm navbar-dark bg-info">
        <a class="navbar-brand" href="/">Flag selling system</a>
        <button
          class="navbar-toggler"
          type="button"
          data-toggle="collapse"
          data-target="#navbarNav"
          aria-controls="navbarNav"
          aria-expanded="false"
          aria-label="Toggle navigation"
        >
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="nav navbar-left">
          <ul class="navbar-nav">
            <%if (req.session.username == "admin1") {%>
            <li class="nav-item">
              <a class="nav-link" href="/management">活動管理</a>
            </li>
            <!-- <li class="nav-item">
              <a class="nav-link" href="/location">旗站管理</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/contact">聯絡資料</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/setting">設定</a>
            </li> -->
            <% }%> 
            
            <%if (req.session.username == "station1") {%>
            <li class="nav-item active">
              <a class="nav-link" href="/personalitem"
                >個人參加<span class="sr-only">(current)</span></a
              >
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/groupitem">團體參加</a>
            </li>

            <li class="nav-item">
              <a class="nav-link" href="/stationmanagement">旗站統計</a>
            </li>
            <% }%>

          </ul>
        </div>
        <div class="navbar-nav ml-auto">
          <ul class="navbar-nav">
            <%if (req.session.username) {%>
            <li class="nav-item">
              <a class="nav-link" href="/user/login"
                >Hi, <%= req.session.username %> (Logout) </a
              >
            </li>
            <% } else { %>
            <li class="nav-item">
              <a class="nav-link" href="/user/login">Login</a>
            </li>
            <% } %>
          </ul>
        </div>
      </nav>
    </div>

    <div class="container"><%- body %></div>

    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <!--TEMPLATES END-->

    <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->

    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/dependencies/sails.io.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
